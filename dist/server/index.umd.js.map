{"version":3,"file":"index.umd.js","sources":["../../src/service/service.js","../../src/core/core.js","../../src/server/server.js"],"sourcesContent":["import fs from 'fs'\nimport faker from 'faker'\nimport get from 'lodash.get'\nimport EventEmitter from 'events'\n/**\n * Class for the service\n * @extends EventEmitter\n */\nexport default class MockerService extends EventEmitter {\n  /**\n   * Create a service.\n   * @param {string} name - Name of the service\n   * @param {string|Object} opts - Can be a string for the location of a json file with the options or the options itself.\n   * @param {string} opts.schema - Schema reference for the service model.\n   * @param {string} opts.total - Total of items to seed.\n   * @param {MockerApp} app - Instance of MockerApp.\n   */\n  constructor(name, opts, app) {\n    super()\n    this.app = app\n    this.name = name\n    this.configured = false\n    this.items = []\n    this.startService(opts)\n  }\n  /**\n   * Total items created\n   * @type {number}\n   */\n  get total () { return this.items.length }\n  /**\n   * @method startService\n   * Check the service options and starts configuration\n   */\n  startService (opts) {\n    let options = opts\n    if (typeof options === 'string') {\n      const json = fs.readFileSync(options, { encoding:'utf8' })\n      options = JSON.parse(json)\n    } else if (Array.isArray(options) || typeof options !== 'object') {\n      throw new Error('Options type cannot be \"', typeof options, '\"')\n    }\n    this.configureService(options)\n  }\n  /**\n   * @method configureService\n   * Configure service\n   */\n  configureService ({ schema, total = 10 }) {\n    this.schema = schema\n    this._total = total\n    this.app.server && this.registerRoutes()\n  }\n  /**\n   * @method registerRoutes\n   * Register service routes\n   */\n  registerRoutes () {\n    const baseRoutes = [{\n      method: 'GET',\n      path: `/${this.name}/{id}`,\n      handler: (request) => {\n        return this.items[request.params.id - 1]\n      }\n    },{\n      method: 'GET',\n      path:  `/${this.name}`,\n      handler: (request) => {\n        const itemsToReturn = this.items.filter(item => {\n          const limit = parseInt(request.query.limit) || 4\n          const skip = parseInt(request.query.skip) || 0\n          return item.id <= limit + skip && item.id > skip\n        })\n        return itemsToReturn\n      }\n    }]\n    this.app.server.route(baseRoutes)\n  }\n  /**\n   * @method generateCachedItems\n   * Generate items to data cache mock\n   */\n  generateCachedItems () {\n    this.items = []\n    for (let i = 0; this._total > i; i++) {\n      const item = this.generateItem()\n      this.items.push(item)\n    }\n    this.app.log(`generated ${this.items.length} for service ${this.name}`)\n  }\n  /**\n   * @method generateItem\n   * Generate a single item based on a schema configuration.\n   * @param {Object} schema - Base schema for item generation. defaults to `this.schema`\n   * @param {number} id - Id of the item to be generated. defaults to `this.items.length + 1`\n   */\n  generateItem (schema, id) {\n    const sch = schema || this.schema\n    const keys = Object.keys(sch)\n    const obj = { id: id || this.items.length + 1 }\n    for (let i = 0; keys.length > i; i++) {\n      const key = keys[i]\n      obj[key] = this.generateProperty(sch[key])\n    }\n    return obj\n  }\n  /**\n   * @method generateProperty\n   * Generate a single property for an item.\n   * @param {string} type - Type of the property. defaults to `string`.\n   * @param {number} total - If type is `array` sets the total number of items to be created in the array.\n   * @param {number} properties - If type is `object` or `array` and fakerType is set to `object` provides the schema of the object to be generated.\n   * @param {string} fakerType - Type of faker to be used. Check the possible [API methods](http://marak.github.io/faker.js/#toc7__anchor)\n   */\n  generateProperty ({ type = 'string', total = 4, properties = {}, fakerType = 'lorem.text'}) {\n    if (typeof type === 'array') {\n      const items = []\n      for (let i = 0; total > i; i++) {\n        if (fakerType === 'object') {\n          const obj = this.generateItem(properties, i + 1)\n          items.push(obj)\n        } else {\n          let fakerFunc = get(faker, fakerType)[0]\n          if (!fakerFunc) {\n            fakerFunc = get(faker, 'lorem.text')\n          }\n          items.push(fakerFunc())\n        }\n        return items\n      }\n    } else if (typeof type === 'object') {\n      return this.generateItem(properties, 1)\n    } else {\n      let fakerFunc = get(faker, fakerType)\n      if (!fakerFunc) {\n        fakerFunc = get(faker, 'lorem.text')\n      }\n      return fakerFunc()\n    }\n  }\n  /**\n   * @method destroy\n   * Destroys the service\n   */\n   destroy () {\n    this.removeAllListeners()\n  }\n  /**\n   * @method find\n   * Get many items from the generated cached items\n   * @param {number} limit - Number of items to return\n   * @returns {array} - Array of items\n   */\n  find ({ limit = 4, skip = 0 }) {\n    return this.app.transport.get(`${this.name}?limit=${limit}&skip=${skip}`).then(res => {\n      return { data: res.data, total: this.total }\n    }).catch(err => {\n      const errMessage = err.response.data.message\n      this.emit('error', errMessage)\n    })\n  }\n  /**\n   * @method get\n   * Get one from the generated cached items\n   * @param {number} id - Id of the item to be returned\n   * @returns {Object} - Item from the generated cached items\n   */\n  get (id = 1) {\n    return this.app.transport && this.app.transport.get(`${this.name}/${id}`).then(res => {\n      return res.data\n    }).catch(err => {\n      const errMessage = err.response.data.message\n      this.emit('error', errMessage)\n    })\n  }\n  /**\n   * @method createStore\n   * Create a vuex module based on the service\n   * @returns {Object} - Vuex Module\n   */\n  createStore () {\n    return {\n      namespaced: true,\n      static: {\n        items: [],\n        total: 0\n      },\n      mutations: {\n        ADD_ITEM_TO_STORE (state, item) {\n          const exists = !!state.items.filter(i => i.id === item.id)[0]\n          if (!exists) {\n            state.items.push(item)\n          }\n        },\n        UPDATE_TOTAL (state, total) {\n          state.total = total\n        }\n      },\n      actions: {\n        findItems ({ commit }, { limit, skip }) {\n          return this.find(limit, skip).then(res => {\n            commit('UPDATE_TOTAL', res.total)\n            res.data.forEach(item => {\n              commit('ADD_ITEM_TO_STORE', item)\n            })\n          })\n        },\n        getItem (id) {\n          return this.get(id).then(item => {\n            commit('ADD_ITEM_TO_STORE', item)\n          })\n        }\n      },\n      getters: {\n        getById: (state) => (id) => {\n          return state.items.filter(item => item.id === id)[0]\n        },\n        findInStore: (state) => (limit = 4, skip = 0) => {\n          return state.items.filter(item => item.id <= limit + skip && item.id > skip)\n        }\n      }\n    }\n  }\n}","import fs from 'fs'\nimport path from 'path'\nimport axios from 'axios'\nimport EventEmitter from 'events'\nimport MockerService from '../service/service.js'\n/**\n * Class for the client app to request data from the server\n * @extends EventEmitter\n */\nexport default class MockerCore extends EventEmitter {\n  /**\n   * Create mock app\n   * @param {Object} options - Options for the app creation\n   * @param {string} options.host - host app will be on. default = localhost\n   * @param {string} options.port - port the app will listen to. default = 3001\n   * @param {object} options.services - services configuration, each `key` will be one service. To check options see MockerService class\n   * @param {string} options.servicesPath - path to a folder containing a json file for each service, with configuration options.\n   * @param {boolean} options.debug - debug mode.\n   */\n  constructor({ port = 3001, host = 'localhost', services = {}, servicesPath, debug = false }) {\n    super()\n    this.services = {}\n    this._host = host\n    this._port = port\n    this._services = services\n    this._servicesPath = servicesPath\n    this.debug = debug\n    this.transport = axios.create({\n      baseURL: 'http://' + this._host + ':' + this._port + '/'\n    })\n  }\n  /**\n   * Getter for the host option\n   * @type {string}\n   */\n  get host () { return this._host }\n  /**\n   * Getter for the port option\n   * @type {string|number}\n   */\n  get port () { return this._port }\n  /**\n   * Array of names of the registered services\n   * @type {array}\n   */\n  get servicesRegistered () { return Object.keys(this.services) }\n  /**\n   * @method registerServices\n   * Create and register each service passed in options.\n   * If a `servicePath` is provided, it will overide the `services` provided\n   */\n  registerServices () {\n    this.services = {}\n    if (this._servicesPath) {\n      const pahtJoin = path.join(this._servicesPath)\n      fs.readdirSync(pahtJoin).forEach(file => {\n        const serviceName = this.checkFile(file)\n        if (serviceName) {\n          this.registerService(serviceName, pahtJoin + `/${file}`)\n        }\n      })\n    } else if (this._services && Object.keys(this._services).length > 0) {\n      Object.keys(this._services).forEach(key => {\n        const serviceName = key\n        const serviceConfig = this._services[serviceName]\n        this.registerService(serviceName, serviceConfig)\n      })\n    } else {\n      this.handleError('No services found')\n    }\n    if (this.servicesRegistered.length === 0) {\n      this.handleError('No services found')\n    }\n  }\n  /**\n   * @method registerService\n   * Create and register a single service.\n   * @param {string} serviceName - Name of the service\n   * @param {object|string} serviceConfig - Config of the service\n   */\n  registerService (serviceName, serviceConfig) {\n    this.log(`Registering ${serviceName} service`)\n    const service = new MockerService(serviceName, serviceConfig, this)\n    this.services[serviceName] = service\n    this.log(`${serviceName} registered`)\n    this.log(this.servicesRegistered)\n  }\n  /**\n   * @method checkFile\n   * Check a filename if it a json and returns it's name\n   * @param {string} file - file name with format\n   * @returns {string|null} name of the file or null if the file is not a json\n   */\n  checkFile (file) {\n    const name = file.split('.')\n    const format = name.pop()\n    const isService = format === 'json'\n    return isService ? name.join('.') : null\n  }\n  /**\n   * @method service\n   * Start the app\n   * @param {string} serviceName - Name of the service\n   * @returns {MockerService}\n   */\n  service (serviceName) {\n    if (!this.services[serviceName]) {\n      this.handleError(`No service with the name ${serviceName} registered`)\n    }\n    return this.services[serviceName]\n  }\n  /**\n   * @method onError\n   * Handle error\n   * @param err - Error message\n   */\n  handleError (err) {\n    this.emit('error', err)\n    throw new Error(err)\n  }\n  /**\n   * @method log\n   * Handle log\n   * @param msg - Message to log\n   */\n  log (msg) {\n    this.debug && console.log(msg)\n  }\n}","import hapi from '@hapi/hapi'\nimport EventEmitter from 'events'\nimport MockerCore from '../core/core.js'\n/**\n * Class for the server app to create mock data\n * @extends EventEmitter\n */\nexport default class MockerServer extends MockerCore {\n  /**\n   * Create mock app\n   * @param {Object} options - Options for the app creation\n   * @param {string} options.host - host app will be on. default = localhost\n   * @param {string} options.port - port the app will listen to. default = 3001\n   * @param {object} options.services - services configuration, each `key` will be one service. To check options see MockerService class\n   * @param {string} options.servicesPath - path to a folder containing a json file for each service, with configuration options.\n   * @param {boolean} options.debug - debug mode.\n   */\n  constructor(...args) {\n    super(...args)\n    this.createServer()\n    this.registerServices()\n    this.seedServices()\n  }\n  /**\n   * Getter for the hapi server\n   * @type {Object} Hapi server\n   */\n  get server () { return this._server }\n  /**\n   * @method createServer\n   * Instantiate hapi server\n   */\n  createServer () {\n    this._server = hapi.server({\n      port: this._port,\n      host: this._host,\n      routes: {\n        cors: true\n      }\n    })\n  }\n  /**\n   * @method seedServices\n   * Seeds each service with sample data.\n   */\n  seedServices () {\n    Object.values(this.services).forEach(service => {\n      service.generateCachedItems()\n    })\n  }\n  /**\n   * @method start\n   * Start the app\n   */\n  start () {\n    return this._server.start()\n  }\n  /**\n   * @method restart\n   * Restarts the app\n   */\n   restart () {\n    if (this.servicesRegistered.length > 0) {\n      this.destroy()\n    }\n    this.registerServices()\n  }\n  /**\n   * @method destroy\n   * Destroys the app\n   */\n   destroy () {\n    Object.values(this.services).forEach(service => {\n      service.destroy()\n    })\n    this.services = {}\n    this.server.stop()\n  }\n}"],"names":["super","let","const","fs","this","get","faker","fakerFunc","EventEmitter","axios","path","hapi"],"mappings":"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"}